МІНІСТЕРСТВО ОСВІТИ ТА НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра програмної інженерії



ЗВІТ
З дисципліни: «Аналіз та рефакторинг коду»
З практичної роботи №1
На тему: «Правила оформлення програмного коду»



Виконав: 										
Ст. гр. ПЗПІ-22-6                                                                                       
Шараєв Б. О.

Перевірив:
ст. викл. Кафедри ПІ
СокорчукІ.П.






Харків 2024

1.1	Тема роботи
Правила написання програмного коду для мови програмування Swift.
1.2	 Мета
Ознайомитись з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для різних мов програмування, а також навчитися аналізувати та рефакторити код для покращення його якості.
1.3	Хід роботи
1.	Було обрано мову програмування Swift.
2.	Створено презентацію в якій розглянуто основні рекомендації для написання коду на Swift
3.	Основні рекомендації по написанню коду на Swift:
1)	Використовуйте осмислені назви змінних та функцій
Назви змінних, функцій та параметрів мають бути зрозумілими, відображати їхню роль та мету. Скорочення чи абревіатури роблять код менш читабельним.
1	// Поганий приклад - скорочення та незрозумілі назв
2	func cAvg(d: [Double]) -> Double {
3	let s = d.reduce(0, +)
4	return s / Double(d.count)
5	}
6	let r = [0.1, 0.3, 0.5, 0.7]
7	print(cAvg(d: r))

8	// Гарний приклад - назви зрозумілі і відображають суть дій
9	func calculateAverageRadiation(for readings: [Double]) -> Double {
10	let total = readings.reduce(0, +)
11	return total / Double(readings.count)
12	}
13	let radiationReadings = [0.1, 0.3, 0.5, 0.7]
14	print(calculateAverageRadiation(for: radiationReadings))

2)		Дотримуйтеся послідовного форматування коду
Дужки, відступи, та структура функцій мають бути однорідними для всього проєкту. Це спрощує розуміння коду та зменшує ризик помилок.
1	// Гарний приклад - форматування послідовне
2	func fetchRadiationData(from url: URL) {
3	guard let data = try? Data(contentsOf: url) else {
print("Помилка завантаження даних")
return
4	}
5	print("Дані завантажено успішно")
6	}

7	// Поганий приклад - різні стилі форматування
8	func fetchRadiationData(from url: URL)
9	{
10	guard let data = try? Data(contentsOf: url) else {
11	print("Помилка завантаження даних")
12	return
13	}
14	print("Дані завантажено успішно")
15	}
3)		Завжди надавайте типи для публічних властивостей і функцій.
Визначайте типи для публічних властивостей і функцій, щоб забезпечити зрозумілість і підтримуваність коду.
1	// Гарний приклад - Чітке визначення типу для публічної функції
2	public func calculateRadiationLevel(readings: [Double]) -> Double {
3	return readings.reduce(0, +) / Double(readings.count)
4	}

5	// Поганий приклад - Відсутність явного типу повернення робить код менш зрозумілим
6	public func calculateRadiationLevel(readings: [Double]) -> Any { // Погано
7	readings.reduce(0, +) / Double(readings.count)
8	}


4)		Замініть магічні числа на константи.
Замість магічних чисел використовуйте константи (let) для значень, які не повинні змінюватися. Це підвищує безпеку коду.
1	//Гарний приклад - Константа для максимального рівня радіації
2	let maxRadiationLimit = 0.30  

3	func isRadiationSafe(currentLevel: Double) -> Bool {
4	return currentLevel < maxRadiationLimit
5	}

6	//Поганий приклад - незрозуміле магічне число
7	func isRadiationSafe(currentLevel: Double) -> Bool {
8	return currentLevel < 0.30
9	}
5)	Використовуйте коментарі.
Використовуйте коментарі, щоб пояснити логіку складних ділянок коду. Коментарі мають бути короткими та інформативними.

1	// Хороший приклад - коментарі пояснють що саме виконується в коді.
2	// Обчислюємо середній рівень радіації
3	let averageRadiation = calculateAverageRadiation(for: readings)
4	// Перевіряємо, чи рівень безпечний
5	let isSafe = isRadiationSafe(currentLevel: averageRadiation)

6	// Поганий приклад - коментарі не пояснюють, що саме виконується в коді
7	// Обчислюємо середній рівень
8	let averageRadiation = calculateAverageRadiation(for: readings)
9	// Перевіряємо рівень
10	let isSafe = isRadiationSafe(currentLevel: averageRadiation)
6)	Документування коду.
Завжди документуйте свої функції та класи, особливо коли мова йде про критично важливі системи.
1	// Гарний приклад

2	/// Функція для обчислення середнього рівня радіації
3	///
4	/// - Parameter readings: Масив значень типу `Double`, що представляють показники рівня радіації.
5	/// - Returns: Середнє значення рівня радіації типу `Double`.
6	/// - Note: Якщо масив порожній, функція поверне `NaN` (Not a Number).
7	func calculateAverageRadiation(for readings: [Double]) -> Double {
8	let total = readings.reduce(0, +)
9	return total / Double(readings.count)
10	}

11	// Поганий приклад - Опис не дає достатньо інформації

12	/// Функція для обчислення середнього рівня радіації
13	func calculateAverageRadiation(for readings: [Double]) -> Double {
14	let total = readings.reduce(0, +)
15	return total / Double(readings.count)
16	}
7)	Обробка помилок.
Використовуйте do-catch для обробки помилок, коли виконуєте критично важливі операції. Це допомагає уникнути аварійних ситуацій та підвищує надійність системи.
1	// Поганий приклад - можливі помилки не обробляються
2	func readRadiationLevel(level: Double) {
3	let level = try getRadiationLevel(level: level)
4	print("Рівень радіації: \(level) мкЗв/год")
5	}

6	// Хороший приклад - використання do-catch для обробки виключень
7	func readRadiationLevel(level: Double) {
8	do {
a.	let level = try getRadiationLevel(level: level)
b.	print("Рівень радіації: \(level) мкЗв/год")
9	} catch let error as NSError {
a.	print("Помилка: \(error.localizedDescription)")
10	}
11	}

8)	Розділяйте складність.
Розділення функцій за принципом Single Responsibility спрощує розуміння, тестування та підтримку коду.
1	// Поганий приклад - метод виконує одразу дві задачі
2	func fetchAndAnalyzeRadiation() -> Bool {
3	let radiationLevel = Double.random(in: 0...200) // Отримання даних
4	return radiationLevel > 100.0                 // Аналіз
5	}




6	// Гарний приклад - кожен метод має 1 свою задачу
7	func fetchRadiationLevel() -> Double {
8	return Double.random(in: 0...200) // Тільки отримання даних
9	}

10	func isRadiationDangerous(level: Double) -> Bool {
11	return level > 100.0 // Тільки перевірка рівня
12	}
1.4	Висновок
	Отже, дотримання правил написання коду є ключовим аспектом розробки програмного забезпечення, оскільки воно значно підвищує читабельність та зрозумілість коду. Консистентне дотримання стандартів забезпечує єдиний стиль написання коду у команді розробників, що робить його легшим для сприйняття і скорочує час на вивчення нових фрагментів. Це дозволяє уникати двозначностей і забезпечує швидку адаптацію нових учасників до проекту. 

	Посилання на GitHub репозиторій: 
	https://github.com/NureSharaievBohdan/arkpz-pzpi-22-6-sharaiev-bohdan

	Посилання на YouTube відео з презентацією:
	https://youtu.be/z1f7f2NsiaQ
