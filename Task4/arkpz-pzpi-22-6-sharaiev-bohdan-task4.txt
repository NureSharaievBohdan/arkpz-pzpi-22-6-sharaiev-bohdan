Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії
ЗВІТ
до лабораторної роботи №4 з дисципліни
“Аналіз та рефакторинг коду”


Перевірив:
ст. викл. Сокорчук І.П.
Виконав ст. гр. ПЗПІ-22-6
Шараєв Б. О.

Харків 2024

1. РОЗРОБКА IoT КЛІЄНТА (БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ
НАЛАШТУВАННЯ ДОДАТКУ)

1.1 Мета роботи
Розробити програмне забезпечення для IoT або SmartDevice пристрою,
створеного на базі будь-якої поширеної на сьогодні платформи, придатної для
реалізації вбудованих систем (Embedded System).

1.2 Хід роботи

1.2.1 Розробити будову програмного забезпечення ІоТ клієнта.
Для розробки програмного забезпечення IoT-клієнта було створено
програму на C++, яка забезпечує генерацію даних рівня радіації для кожного
сенсора за допомогою математичної бізнес-логіки. Програма працює за
наступним принципом: кожен сенсор має унікальну географічну локацію, яка
враховується при обчисленні рівня радіації. Окрім географічних даних,
алгоритм використовує поточний час та інші параметри, такі як тип сенсора,
його точність, умови навколишнього середовища тощо.
Згенеровані дані передаються до сервера через протокол HTTP у форматі
JSON. Протокол HTTP дозволяє забезпечити просту та ефективну взаємодію
між IoT-клієнтом та сервером, а використання формату JSON забезпечує
компактність і зручність обробки даних на стороні сервера.
Програма включає наступні ключові модулі:
- Модуль генерації даних: Використовує математичні моделі та
алгоритми для розрахунку рівня радіації на основі вхідних даних.
- Модуль формування запитів: Формує структуру JSON, яка включає
дані про рівень радіації, ідентифікатор сенсора, географічні
координати, часову мітку та інші необхідні параметри.
- Модуль передачі даних: Відправляє сформовані JSON-запити на
сервер через HTTP. Реалізує обробку можливих помилок при
передачі даних, таких як розрив з'єднання або перевищення часу
очікування.
Ця система дозволяє забезпечити автоматизований збір даних про рівень
радіації, що є важливою складовою у задачах моніторингу та аналізу
екологічних умов.

1.2.2 Створити UML діаграму прецедентів для ІоТ клієнта.
Рисунок 1.2.2.1 - UML діаграма прецедентів для ІоТ клієнта.

1.2.3 Розробити бізнес логіку (математину обробку повʼязаних із
предметною областю даних) та функції налаштування ІоТ клієнта.
Було розроблено алгоритм для розрахунку рівня радіації:
- Алгоритм починається з визначення базового рівня, який може бути
низьким, помірним, високим чи критичним.
- Далі враховується географічний фактор, що залежить від широти та
довготи локації сенсора, що розраховується через математичні
формули.
- Алгоритм обчислює різницю між поточним і останнім оновленням
даних, і за допомогою коефіцієнта коригує рівень радіації.
- Додається випадковий шум, який варіюється в межах малих значень,
щоб змоделювати нестабільність рівня радіації.
- Останнім кроком є можливість раптових стрибків рівня радіації до
критичних значень, що виникають через випадкові події, такі як
техногенні або природні катастрофи.
Цей комплексний підхід дозволяє створити динамічну та реалістичну
модель рівня радіації, яка змінюється залежно від географії, часу та
випадкових подій.
Функції налаштування IoT клієнта включають в себе:
- Визначення параметрів для роботи з сервером.
- Збереження даних для авторизації.
- Налаштування рівнів радіації.
- Налаштування інтервалів оновлення сенсорів.
Вони дозволяють коригувати параметри взаємодії клієнта з сервером,
забезпечують налаштування системи для кожного сенсора і автоматичне
оновлення інформації.
Також ці функції налаштування дозволяють IoT клієнту адаптуватися до
конкретних умов експлуатації, налаштовувати параметри для всіх сенсорів, а
також забезпечують безпечну взаємодію з сервером та постійне оновлення
даних.

1.2.4 Створити діаграму діяльності для ІоТ клієнта.
Рисунок 1.2.4.1 - Діаграма діяльності для ІоТ клієнта.

1.2.5 Створити програмну реалізацію бізнес логіки та функцій
налаштування ІоТ клієнта.

Програмний код реалізації генерування рівнів радіацій:
1. double calculateRadiationLevel(double latitude, double
longitude, time_t lastUpdate) {
2. double baseRadiation = Config::LEVEL_LOW;
3. double variation = 0.1;
4. double timeFactor = 0.00005;
5. double geoFactor = sin(latitude) * cos(longitude);
6. time_t currentTime = time(nullptr);
7. double timeDiff = difftime(currentTime, lastUpdate);
8. double radiationLevel = baseRadiation +
9. variation * geoFactor +
10. timeFactor * timeDiff;
11. double randomNoise = (rand() % 100 - 50) / 1000.0;
12. radiationLevel += randomNoise;
13. int randomChance = rand() % 100;
14. if (randomChance < 5) {
15. radiationLevel = Config::LEVEL_CRITICAL + (rand()
% 10) / 100.0;
16. }
17. else if (randomChance < 15) {
18. radiationLevel = Config::LEVEL_HIGH + (rand() %
5) / 100.0;
19. }
20. return mymax(0.0, radiationLevel);
21. }

Програмний код функцій налаштування ІоТ-клієнту:
1. #pragma once
2. #include <string>
3. namespace Config {
4. // Server config
5. const std::string BASE_URL = "http://localhost:8000/api/";
6. const std::string SENSOR_API = BASE_URL + "sensors/";
7. const std::string LOCATION_API = BASE_URL + "locations/";
8. const std::string RADIATION_API = BASE_URL + "radiationdata/";
9. const std::string LOGIN_API = BASE_URL + "auth/login/";
10. // Admin Credetionals
11. const std::string EMAIL = "email";
12. const std::string PASSWORD = "password";
13. // Radiation Levels(mSv/h)
14. const double LEVEL_LOW = 0.1;
15. const double LEVEL_MODERATE = 0.3;
16. const double LEVEL_HIGH = 0.5;
17. const double LEVEL_CRITICAL = 1.0;
18. // Sleep Interval in ms between sensor
19. const int SENSOR_UPDATE_INTERVAL_MS = 3000;
20. }

1.3 Висновок
Під час виконання лабораторної роботи було розроблено програмне
забезпечення для IoT.
Посилання на відеозапис: https://youtu.be/mKq6fgBLy6s
